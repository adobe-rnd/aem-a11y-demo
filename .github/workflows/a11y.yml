name: AEM A11y Demo CI

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      url_pairs: ${{ steps.extract_urls.outputs.url_pairs }}
      has_pairs: ${{ steps.extract_urls.outputs.has_pairs }}
    steps:
      - name: Extract and Pair AEM Preview URLs
        id: extract_urls
        uses: actions/github-script@v7
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            const urlRegex = /https:\/\/[a-zA-Z0-9-]+--[a-zA-Z0-9-]+--[a-zA-Z0-9-]+\.aem\.(?:live|page)[^\s<]*/g;
            const matches = [...new Set(prBody.match(urlRegex) || [])];
            
            const mainUrls = matches.filter(url => url.includes('--main--'));
            const candidateUrls = matches.filter(url => !url.includes('--main--'));

            const mainUrlMap = new Map(mainUrls.map(url => {
              try {
                return [new URL(url).pathname, url];
              } catch (e) {
                console.warn(`Invalid baseline URL skipped: ${url}`);
                return [null, null];
              }
            }).filter(p => p[0]));

            const urlPairs = candidateUrls.map(candidateUrl => {
              try {
                const path = new URL(candidateUrl).pathname;
                return {
                  candidate: candidateUrl,
                  baseline: mainUrlMap.get(path) || '',
                };
              } catch(e) {
                console.warn(`Invalid candidate URL skipped: ${candidateUrl}`);
                return null;
              }
            }).filter(p => p);

            console.log('URL Pairs:', JSON.stringify(urlPairs, null, 2));
            core.setOutput('url_pairs', JSON.stringify(urlPairs));
            core.setOutput('has_pairs', urlPairs.length > 0);

  run_audits_and_report:
    needs: setup
    if: needs.setup.outputs.has_pairs == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v6
        with: { node-version: '22', cache: 'npm' }
      - run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run audits for all URL pairs
        id: run_audits
        run: |
          node -e '
            const fs = require("fs");
            const { execSync } = require("child_process");
            const urlPairs = JSON.parse(process.env.URL_PAIRS);
            const reportDir = "./reports/all";
            if (!fs.existsSync(reportDir)) fs.mkdirSync(reportDir, { recursive: true });

            function runAudit(url, type, slug) {
              if (!url || !type || !slug) {
                return;
              }
              console.log(`Auditing ${url} (type: ${type}, slug: ${slug})`);
              const axeFile = `${reportDir}/axe-${type}-${slug}.json`;
              const lhrFile = `${reportDir}/lhr-${type}-${slug}.json`;
              const aemFile = `${reportDir}/aem-${type}-${slug}.json`;

              try {
                execSync(`node ./.github/run-axe.cjs --url ${url} --output ${axeFile}`, { stdio: "inherit" });
              } catch (e) {
                console.warn(`Axe audit for ${url} failed to execute.`);
              }

              try {
                execSync(`node ./.github/run-aem-rules.js --url ${url} --output ${aemFile}`, { stdio: "inherit" });
              } catch (e) {
                console.warn(`Custom AEM rules audit for ${url} failed to execute.`);
              }

              try {
                execSync(`npx lhci collect --url=${url} --config=./lighthouserc.cjs`, { stdio: "inherit" });
                const tempLhr = fs.readdirSync(".lighthouseci").find(f => f.startsWith("lhr-"));
                if (tempLhr) {
                    fs.renameSync(`.lighthouseci/${tempLhr}`, lhrFile);
                }
              } catch (e) {
                console.warn(`Lighthouse audit failed for ${url}.`);
              }
            }

            for (const pair of urlPairs) {
              if (!pair.candidate) continue;
              const slug = new URL(pair.candidate).pathname.replace(/[^a-zA-Z0-9]/g, "_");
              runAudit(pair.candidate, "candidate", slug);
              runAudit(pair.baseline, "baseline", slug);
            }
          '
        env:
          URL_PAIRS: ${{ needs.setup.outputs.url_pairs }}

      - name: Upload all reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: all-reports
          path: ./reports/all/

      - name: Generate consolidated report
        id: generate_report
        if: always()
        run: node ./.github/generate-a11y-report.js --reports-dir ./reports/all --output-file ./reports/summary.md

      - name: Post accessibility summary comment
        if: always() && steps.generate_report.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportPath = './reports/summary.md';
            if (fs.existsSync(reportPath)) {
              const reportContent = fs.readFileSync(reportPath, 'utf8');
              const marker = '<!-- A11Y_SUMMARY_BOT -->';
              const body = `${reportContent}\n\n${marker}`;

              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const existingComment = comments.find(c => c.body.includes(marker));

              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body,
                });
                console.log(`Updated accessibility comment: ${existingComment.html_url}`);
              } else {
                const { data: newComment } = await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body,
                });
                console.log(`Created new accessibility comment: ${newComment.html_url}`);
              }
            } else {
              console.log('Summary report not found, skipping comment.');
            }
